// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EditCustomerForm rendering correctly renders the customer form when the form is loading 1`] = `
<Formik
  customer={
    Object {
      "addresses": Array [
        Object {
          "additional_address": "additional_address",
          "city": "city",
          "neighborhood": "neighborhood",
          "state": "state",
          "street_name": "street_name",
          "street_number": "street_number",
          "zipcode": "01219-000",
        },
      ],
      "birthday": "1978-06-13",
      "emails": Array [
        Object {
          "email": "test@test.com",
        },
      ],
      "gender": "f",
      "name": "Name",
      "phones": Array [
        Object {
          "id": 1,
          "phone": "123456789",
        },
      ],
    }
  }
  enableReinitialize={true}
  history={
    Object {
      "goBack": [Function],
    }
  }
  initialValues={
    Object {
      "customer": Object {
        "addresses": Array [
          Object {
            "additional_address": "additional_address",
            "city": "city",
            "neighborhood": "neighborhood",
            "state": "state",
            "street_name": "street_name",
            "street_number": "street_number",
            "zipcode": "01219-000",
          },
        ],
        "birthday": "1978-06-13",
        "emails": Array [
          Object {
            "email": "test@test.com",
          },
        ],
        "gender": "f",
        "name": "Name",
        "phones": Array [
          Object {
            "id": 1,
            "phone": "123456789",
          },
        ],
      },
      "editMode": true,
    }
  }
  isInitialValid={false}
  loading={true}
  mutate={[Function]}
  onSubmit={[Function]}
  render={[Function]}
  shallow={true}
  validate={[Function]}
  validateOnBlur={true}
  validateOnChange={true}
/>
`;

exports[`EditCustomerForm rendering correctly renders the customer form when there is no customer in props 1`] = `
<Formik
  enableReinitialize={true}
  history={
    Object {
      "goBack": [Function],
    }
  }
  initialValues={
    Object {
      "customer": null,
    }
  }
  isInitialValid={false}
  loading={false}
  mutate={[Function]}
  onSubmit={[Function]}
  render={[Function]}
  shallow={true}
  validate={[Function]}
  validateOnBlur={true}
  validateOnChange={true}
/>
`;

exports[`EditCustomerForm rendering correctly renders the customer when the form is loaded 1`] = `
<Formik
  customer={
    Object {
      "addresses": Array [
        Object {
          "additional_address": "additional_address",
          "city": "city",
          "neighborhood": "neighborhood",
          "state": "state",
          "street_name": "street_name",
          "street_number": "street_number",
          "zipcode": "01219-000",
        },
      ],
      "birthday": "1978-06-13",
      "emails": Array [
        Object {
          "email": "test@test.com",
        },
      ],
      "gender": "f",
      "name": "Name",
      "phones": Array [
        Object {
          "id": 1,
          "phone": "123456789",
        },
      ],
    }
  }
  enableReinitialize={true}
  history={
    Object {
      "goBack": [Function],
    }
  }
  initialValues={
    Object {
      "customer": Object {
        "addresses": Array [
          Object {
            "additional_address": "additional_address",
            "city": "city",
            "neighborhood": "neighborhood",
            "state": "state",
            "street_name": "street_name",
            "street_number": "street_number",
            "zipcode": "01219-000",
          },
        ],
        "birthday": "1978-06-13",
        "emails": Array [
          Object {
            "email": "test@test.com",
          },
        ],
        "gender": "f",
        "name": "Name",
        "phones": Array [
          Object {
            "id": 1,
            "phone": "123456789",
          },
        ],
      },
      "editMode": true,
    }
  }
  isInitialValid={false}
  loading={false}
  mutate={[Function]}
  onSubmit={[Function]}
  render={[Function]}
  shallow={true}
  validate={[Function]}
  validateOnBlur={true}
  validateOnChange={true}
/>
`;
